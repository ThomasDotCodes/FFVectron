#include "octane-oslintrin.h"
#include "ff-vectron.h"

// based on PseudoKleinian_4D_Quaternion_Julia.frag by Knighty

float RoundBox(vec3 p, vec3 csize, float offset) {
	vec3 di = abs(p) - csize;
	float k=max(di.x,max(di.y,di.z));
	return abs(k*float(k<0.)+ length(max(di,0.0))-offset);
}


float DE1(vec3 pos, int JIterations, float JThreshold, vec4 JC, output float orbitTrap) {
	vec4 p = toVec4(pos, 0.0);
	vec4 dp = vec4(1.0, 0.0,0.0,0.0);
	for (int i = 0; i < JIterations; i++) {
		dp = 2.0* toVec4(p.x*dp.x-dot(yzw(p), yzw(dp)), p.x*yzw(dp)+dp.x*yzw(p)+cross(yzw(p), yzw(dp)));
		p = toVec4(p.x*p.x-dot(yzw(p), yzw(p)), 2.0*p.x*yzw(p)) + JC;
		float p2 = dot(p,p);
		orbitTrap = min(orbitTrap, abs(p2));
		if (p2 > JThreshold) break;
	}
	float r = length(p);
	return  0.5 * r * log(r) / length(dp);
}

float Thingy(vec3 p, float e, vec3 Offset){
	p-=Offset;
	return (abs(length(xy(p))*p.z)-e) / sqrt(dot(p,p)+abs(e));
}

float Thing2(vec3 p, int Shape, int Iterations, float Size, vec3 CSize, vec3 C, vec3 Offset, float TThickness, float DEoffset, int JIterations, float JThreshold, vec4 JC, output float orbitTrap){
  //Just scale=1 Julia box
  float DEfactor=1.;
  vec3 ap=p+1.;
  for(int i=0;i<Iterations && (ap.x!=p.x || ap.y!=p.y || ap.z!=p.z);i++){
    ap=p;
    p=2.*clamp(p, -1 * CSize, CSize)-p;
    float r2=dot(p,p);
    orbitTrap = min(orbitTrap, abs(r2));
    float k=max(Size/r2,1.);
    p*=k;
    DEfactor*=k;
    p+=C;
    orbitTrap = min(orbitTrap, abs(dot(p,p)));
  }
  //Call basic shape and scale its DE
  if(Shape==0) {
    return abs(0.5*Thingy(p,TThickness,Offset)/DEfactor-DEoffset);
  }
  else if(Shape==1) {
    //Alternative shape
    return abs(0.5*RoundBox(p, vec3(1.,1.,1.), 1.0)/DEfactor-DEoffset);
  }
  else {
    //Just a plane
    return abs(0.5*abs((p.z-Offset.z)*DE1(p, JIterations, JThreshold, JC, orbitTrap))/DEfactor-DEoffset);
  }
}

shader OslGeometry(int Shape = 1, int Iterations = 5, float Size = 1, float CSizeX = 1, float CSizeY = 1, float CSizeZ = 1, 
  float CX = 1, float CY = 1, float CZ = 1, float TThickness = 0.01, float OffsetX = 0, float OffsetY = 0, float OffsetZ = 0, 
  float DEoffset = 0.0, int JIterations = 16, float JThreshold = 10, float JCX = 0.18, float JCY = 0.88, float JCZ = 0.24, float JCW = 0.16, 
  float ScaleX = 1, float ScaleY = 1, float ScaleZ = 1, float ShiftX = 0, float ShiftY = 0, float ShiftZ = 0, 
  ADD_COLOR_PARAMS,
  output _sdf c = _SDFDEF) {
  INIT_ORBIT_TRAP;
  vec3 p = vec3(P[0]*ScaleX+ShiftX, P[1]*ScaleY+ShiftY, P[2]*ScaleZ+ShiftZ);
  vec3 CSize = vec3(CSizeX, CSizeY, CSizeZ);
  vec3 C = vec3(CX, CY, CZ);
  vec3 Offset = vec3(OffsetX, OffsetY, OffsetZ);
  vec4 JC = vec4(JCX, JCY, JCZ, JCW);


  c.dist = Thing2(p, Shape, Iterations, Size, CSize, C, Offset, TThickness, DEoffset, JIterations, JThreshold, JC, orbitTrap);
  APPLY_ORBIT_TRAP;
}

