#include "octane-oslintrin.h"
#include "ff-vectron.h"

// based on BioCube.frag by DarkBeam
shader OslGeometry(int Iterations = 12, float Scale = 1.5, float Qube = 0.1, float Angle1 = 0, float OffsetX = 0, float OffsetY = 1, float OffsetZ = 1, float Offset2X = 1, float Offset2Y = -0.3, float Offset2Z = -0.3, output _sdf c = _SDFDEF) {
  vec3 Offset = vec3( OffsetX, OffsetY, OffsetZ );
  vec3 Offset2 = vec3( Offset2X, Offset2Y, Offset2Z );
  vec3 Rot1 = vec3( 1, 1, 1);

  float t; int n = 0;
  float scalep = 1;

  mat3 fracRotation1 = Scale* rotationMatrix3(normalize(Rot1), Angle1);

  vec3 z = toVec3( P );

  vec3 z0=z;
  z = abs(z);
  

  float r = length(z);

  if (z.y>z.x) z = swap_xy( z );
  if (z.z>z.x) z = swap_xz( z );
  if (z.y>z.x) z = swap_xy( z );
  float DE1 =1.0-z.x;
  z = z0;
  // Folds.
  //Dodecahedral
  while (n < Iterations) {
    z *= fracRotation1;
    z = abs(z);
    z -= Offset;
    if (z.y>z.x) z = swap_xy( z );
    if (z.z>z.x) z = swap_xz( z );
    if (z.y>z.x) z = swap_xy( z );
    z -= Offset2;
    if (z.y>z.x) z = swap_xy( z );
    if (z.z>z.x) z = swap_xz( z );
    if (z.y>z.x) z = swap_xy( z );;
    n++;  
    scalep *= Scale;
    DE1 = abs(min(Qube/n-DE1,(+z.x)/scalep));
    
  }
  c.dist = DE1;
}
