//
//Formula by Knighty 
//http://www.fractalforums.com/fragmentarium/solids-many-many-solids/msg40855/#msg40855
//

#include "octane-oslintrin.h"
#include "ff-vectron.h"

#define PI 3.14157

vec4 normalize(vec4 a) { return a/length(a); }

vec4 Rotate(vec4 p,vec3 RotVector,float sRA,float cRA){
	//this is a rotation on the plane defined by RotVector and w axis
	//We do not need more because the remaining 3 rotation are in our 3D space
	//That would be redundant.
	//This rotation is equivalent to translation inside the hypersphere when the camera is at 0,0,0
	vec4 p1=p;
	vec3 rv;
	rv=normalize(RotVector);
	float vp=dot(rv,vec3(p.x,p.y,p.z));
//	p1.xyz+=rv*(vp*(cRA-1.)-p.w*sRA);
         vec3 t=vec3(p1.x,p1.y,p1.z);
        t+=rv*(vp*(cRA-1.)-p.w*sRA);
//	p1.w+=vp*sRA+p.w*(cRA-1.);
        float w=p1.w;
        w+=vp*sRA+p.w*(cRA-1.);
//	return p1;
	return vec4(t.x,t.y,t.z,w);
}

vec4 fold(output vec4 pos,vec4 nd) {
	for(int i=0;i<3;i++){
		//pos.xyz=abs(pos.xyz);
		vec3 t1=abs(vec3(pos.x,pos.y,pos.z));
                pos=vec4(t1.x,t1.y,t1.z,pos.w);

		float t=-2.*min(0.,dot(pos,nd)); 
                pos+=t*nd;
	}
	return pos;
}

float DDV(float ca, float sa, float r,float sVR,float cVR){
	//magic formula to convert from spherical distance to planar distance.
	//involves transforming from 3-plane to 3-sphere, getting the distance
	//on the sphere (which is an angle -read: sa==sin(a) and ca==cos(a))
	//then going back to the 3-plane.
	//return r-(2.*r*ca-(1.-r*r)*sa)/((1.-r*r)*ca+2.*r*sa+1.+r*r);
	return (2.*r*cVR-(1.-r*r)*sVR)/((1.-r*r)*cVR+2.*r*sVR+1.+r*r)-(2.*r*ca-(1.-r*r)*sa)/((1.-r*r)*ca+2.*r*sa+1.+r*r);
}
float DDS(float ca, float sa, float r,float sSR,float cSR){
	return (2.*r*cSR-(1.-r*r)*sSR)/((1.-r*r)*cSR+2.*r*sSR+1.+r*r)-(2.*r*ca-(1.-r*r)*sa)/((1.-r*r)*ca+2.*r*sa+1.+r*r);
}

float dist2Vertex(vec4 z, float r,vec4 p,float sVR,float cVR){
	float ca=dot(z,p), sa=0.5*length(p-z)*length(p+z);//sqrt(1.-ca*ca);//
	return DDV(ca,sa,r,sVR,cVR);//-VRadius;
}

float dist2Segment(vec4 z, vec4 n, float r,vec4 p,float sSR,float cSR){
	//pmin is the orthogonal projection of z onto the plane defined by p and n
	//then pmin is projected onto the unit sphere
	float zn=dot(z,n),zp=dot(z,p),np=dot(n,p);
	float alpha=zp-zn*np, beta=zn-zp*np;
	vec4 pmin=normalize(alpha*p+min(0.,beta)*n);
	//ca and sa are the cosine and sine of the angle between z and pmin. This is the spherical distance.
	float ca=dot(z,pmin), sa=0.5*length(pmin-z)*length(pmin+z);//sqrt(1.-ca*ca);//
	return DDS(ca,sa,r,sSR,cSR);//-SRadius;
}
//it is possible to compute the distance to a face just as for segments: pmin will be the orthogonal projection
// of z onto the 3-plane defined by p and two n's (na and nb, na and nc, na and and, nb and nd... and so on).
//that involves solving a system of 3 linear equations.
//it's not implemented here because it is better with transparency

float dist2Segments(vec4 z, float r,vec4 p,vec4 nd,float sSR,float cSR){
	float da=dist2Segment(z, vec4(1.,0.,0.,0.), r,p,sSR,cSR);
	float db=dist2Segment(z, vec4(0.,1.,0.,0.), r,p,sSR,cSR);
	float dc=dist2Segment(z, vec4(0.,0.,1.,0.), r,p,sSR,cSR);
	float dd=dist2Segment(z, nd, r,p,sSR,cSR);
	
	return min(min(da,db),min(dc,dd));
}

shader Polychora(
float U = 1,
float V = 0.5045045,
float W = 0.5555556,
float T = 0,
float VRadius = 0.0890411,
float  SRadius = 0.02476,
float RotVectorX= 0,
float RotVectorY= 0,
float RotVectorZ= 1,
float RotAngle = 45,
ADD_COLOR_PARAMS,
output _sdf c = _SDFDEF)
//  output float dist=0.)

 {
    vec3 RotVector=vec3(RotVectorX,RotVectorY,RotVectorZ);
    vec3 pos=vec3(P[0],P[1],P[2]);

    float cVR,sVR,cSR,sSR;
    vec4 nd=vec4(-0.5,-0.5,-0.5,0.5);
    vec4 orbitTrap1=toVec4(1000.);


     INIT_ORBIT_TRAP;

	vec4 pabc,pbdc,pcda,pdba;
	pabc=vec4(0.,0.,0.,1.);
	pbdc=1./sqrt(2.)*vec4(1.,0.,0.,1.);
	pcda=1./sqrt(2.)*vec4(0.,1.,0.,1.);
	pdba=1./sqrt(2.)*vec4(0.,0.,1.,1.);
	
	vec4 p=normalize(U*pabc+V*pbdc+W*pcda+T*pdba);

	float cRA=cos(RotAngle*PI/180.);
        float sRA=sin(RotAngle*PI/180.);

	cVR=cos(VRadius);sVR=sin(VRadius);
	cSR=cos(SRadius);sSR=sin(SRadius);
	float r=length(pos);
	vec4 z4=toVec4(2.*pos,1.-r*r)*1./(1.+r*r);//Inverse stereographic projection of pos: z4 lies onto the unit 3-sphere centered at 0.
	z4=Rotate(z4,RotVector,sRA,cRA);//z4.xyw=rot*z4.xyw;
	z4=fold(z4,nd);//fold it
	orbitTrap1=z4;
//	dist= min(dist2Vertex(z4,r,p,sVR,cVR),dist2Segments(z4, r,p,nd,sSR,cSR));
      c.dist= min(dist2Vertex(z4,r,p,sVR,cVR),dist2Segments(z4, r,p,nd,sSR,cSR));
      APPLY_ORBIT_TRAP;
}

