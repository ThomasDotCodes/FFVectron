#include  "octane-oslintrin.h"
#include  "ff-vectron.h"


mat3 rotationMatrixXYZ(vec3 v) {
	return rotationMatrix3(vec3(1.0,0.0,0.0), v.x)*
	rotationMatrix3(vec3(0.0,1.0,0.0), v.y)*
	rotationMatrix3(vec3(0.0,0.0,1.0), v.z);
}

struct Shape {
  int type;
  float scale;
  vec3 center;
  mat3 rotMat;   // rotation matrix for shape rotation
  float a;
};


// Mandelbox3d ShapeInversion experiments with octahedrons
//    created by Gregg Helt
// Allows replacing of spherical inversion with shape inversion where shape types are:
//    0 => sphere
//    1 => cube
//    2 => sphere/cube union
//    3 => sphere/cube intersection
//    4 => sphere/cube simple linear blend
//    5 => cube (but done via platonic intersection method, unlike 1)
//    6 => octahedron (via platonic intersection method)
//    (other platonic solids left out here, done instead in separate frags because GLSL compilation was getting slow)
//
// Also allowsmandereplacing of min radius with same shapes
//
// Uses techniques described in paper:
//      "Extending Mandelbox Fractals with Shape Inversions", Gregg Helt, July 2018, Bridges 2018 Conference Proceedings
//      http://archive.bridgesmathart.org/2018/bridges2018-547.html
// Includes preset to recreate figure 4a from paper


vec3 platonic_intersect(vec3 p, Shape s, vec3 face_normals[20], int face_count) {
  // Find the closest cutting plane of the platonic solid (if any) that cuts the line between the origin and point p
  //
  // algorithm adapted from parts of fractower's approach for "Generalized Box Folds", see fractalforums thread for more info:
  //      http://www.fractalforums.com/amazing-box-amazing-surf-and-variations/generalized-box-fold/
  // more specifically, from Mandelbulber2 implementation of generalized box fold:
  //      https://github.com/buddhi1980/mandelbulber2/blob/master/mandelbulber2/formula/opencl/generalized_fold_box.cl
    vec3 L = p;
    vec3 Y = vec3(0.0,0.0,0.0); // Y is the origin in this case.
    // int side = -1;
    float a, b, c;
    vec3 shape_intersect;
    vec3 platsect;
    float sidot;
    float mindist = 1000.0;
    int i;
    
    for (i = 0; i < face_count; i++) {
      b = s.scale;
      c = dot(L, face_normals[i]);
      if (c != 0.0) {
	a = b / c;
        shape_intersect = p * a;
	sidot = dot(shape_intersect, shape_intersect);
	if (sidot < mindist) {
	  mindist = sidot;
	  platsect = shape_intersect;
	}
      }
    }
    if (mindist == 1000.0) {
      // no intersections found?
      // give up for now
      // intersectP = p;
      platsect = vec3(1.0,1.0,1.0);
    }
    return platsect;
}

float getShape2CenterSqr(output vec3 p, Shape s,vec3 Nv_cube[],int sides_cube,vec3 Nv_oct[],int sides_oct) {
  p *= s.rotMat;
  float pdistance = length(p);
  vec3 intersectP = vec3(0.0,0.0,0.0);
  float sdistance2;
  
  if (s.type == 0) { // circle
    sdistance2 = s.scale * s.scale;
  }
  else if (s.type == 1) { // origin-centered cube 
    // equation for intersection of ray from origin to point p
    // based on comments from Henning Makholm in this thread:
    // https://math.stackexchange.com/questions/465723/mapping-from-ball-into-cube

    if (p.x == 0.0 && p.y == 0.0 && p.z == 0.0) 
     { 
       intersectP = p; 
     }
    else {
      float maxdim = max(abs(p.x), max(abs(p.y), abs(p.z)));
      intersectP = (p / maxdim) * s.scale;
      sdistance2 = dot(intersectP, intersectP);
    }
  }
  // sphere/cube union
  else if (s.type == 2) { 
    if (p.x == 0.0 && p.y == 0.0 && p.z == 0.0) 
     { 
       intersectP = p;
     }
    else {
      float maxdim = max(abs(p.x), max(abs(p.y), abs(p.z)));
      vec3 box_intersect = (p / maxdim) * s.scale;
      float box_distance2 = dot(box_intersect, box_intersect);
      float sphere_distance2 = s.a * s.a * s.scale * s.scale;
      if (box_distance2 > sphere_distance2) {
	sdistance2 = box_distance2;
      }
      else {
	sdistance2 = sphere_distance2;
      }
    }
  }
  // sphere/cube intersection
  else if (s.type == 3) {
    float maxdim = max(abs(p.x), max(abs(p.y), abs(p.z)));
    vec3 box_intersect = (p / maxdim) * s.scale;
    float box_distance2 = dot(box_intersect, box_intersect);
    float sphere_distance2 = s.a * s.a * s.scale * s.scale;
      
    if (box_distance2 < sphere_distance2) {
      sdistance2 = box_distance2;
    }
    else {
      sdistance2 = sphere_distance2;
    }
  }
  else if (s.type == 4) {  // blend diff of cube and sphere inscribed in cube (sphere touches center of cube faces)
    // ParamA controls blend contribution from cube and sphere
    // A = 0 ==> only sphere
    // A = 1 ==> only cube
    // blend = (a * intersect(cube)) + ((1-a) * intersect(sphere))
    float maxdim = max(abs(p.x), max(abs(p.y), abs(p.z)));
    vec3 box_intersect = (p / maxdim) * s.scale;
    float box_distance2 = dot(box_intersect, box_intersect);
    float sphere_distance2 = s.scale * s.scale;
    float box_distance = sqrt(box_distance2);
    float sphere_distance = sqrt(sphere_distance2);
    float sdistance = (1.0-s.a)*sphere_distance + s.a*box_distance;
    sdistance2 = sdistance * sdistance;
  }
  else if (s.type == 5) { // cube based on platonic intersection algorithm
    intersectP = platonic_intersect(p, s, Nv_cube, sides_cube);
    sdistance2 = dot(intersectP, intersectP);
  }
  else if (s.type == 6) { // octahedron based on platonic intersection algorithm
    intersectP = platonic_intersect(p, s, Nv_oct, sides_oct);
    sdistance2 = dot(intersectP, intersectP);
  }
  else {  // out of range for ShapeTypes
    sdistance2 = 1.0;
  }
  return sdistance2;
}


// modified inversion that can use shapes other than circles
void shapeInversion(inout vec3 p, inout float der,Shape invShape,Shape minShape,float MinScalingConstant,vec3 Nv_cube[],int sides_cube,vec3 Nv_oct[],int sides_oct) {
  vec3 minp = p;

  // get point position _relative_ to shape center
  p -= invShape.center;
  minp -= minShape.center;

  // get distance from point P to center of invShape, minShape 
  float p2InvCenterSqr = dot(p,p);
  float p2MinCenterSqr = dot(minp, minp);

  // get distance from shape surface intersection point S to shape center
  float s2InvCenterSqr = getShape2CenterSqr(p, invShape,Nv_cube,sides_cube,Nv_oct,sides_oct);
  float s2MinCenterSqr = getShape2CenterSqr(p, minShape,Nv_cube,sides_cube,Nv_oct,sides_oct);

  // determine if point P is inside invShape, minShape 
 // bool insideMinShape = (p2MinCenterSqr < s2MinCenterSqr);
 // bool insideInvShape = (p2InvCenterSqr < s2InvCenterSqr);

  if ((p2MinCenterSqr < s2MinCenterSqr)) {
    // if point is within min shape do inversion _but_ as if point were at edge of min shape
    float ratio = (invShape.scale * invShape.scale) / (minShape.scale * minShape.scale);
      der *= ratio;
      ratio *= MinScalingConstant;
      p *= ratio;
  }
  else if (p2InvCenterSqr < s2InvCenterSqr) {
    // if point is outside minShape but within invShape, do shape inversion relative to invShape
    float ratio = s2InvCenterSqr/p2InvCenterSqr;
    p *= ratio;
    der *= ratio;
  }
  // get absolute point position (reverse offset relative to shape center)
  p += invShape.center;
}

// standard Mandelbox box fold in 3D

void boxFold(inout vec3 p, inout float der,int BoxFoldLimit)    {
  // fold x
  if (p.x > BoxFoldLimit) { p.x = 2.0*BoxFoldLimit - p.x; } 
  else if (p.x < -BoxFoldLimit) { p.x = -2.0*BoxFoldLimit - p.x; }
  // fold y
  if (p.y > BoxFoldLimit) { p.y = 2.0*BoxFoldLimit - p.y; }
  else if (p.y < -BoxFoldLimit) { p.y = -2.0*BoxFoldLimit -p.y; }
  // fold z
  if (p.z > BoxFoldLimit) { p.z = 2.0*BoxFoldLimit - p.z; }
  else if (p.z < -BoxFoldLimit) { p.z = -2.0*BoxFoldLimit -p.z; }
}


shader manbox3DSIOct(
    int Iterations = 17,
int Bailout=1000,
int     BoxFoldLimit = 1,
int InvType = 6,
float InvScale = 2.528,
float InvCenterX = 0.,
float InvCenterY = 0.,
float InvCenterZ = 0.,

float InvRotationX = 45,
float InvRotationY= -19.07834,
float InvRotationZ= 45,

float InvParamA = 1.141593,
int MinType = 0,
float MinScale = 1.502137,
float MinCenterX = 0.,
float MinCenterY = 0.,
float MinCenterZ = 0.,

float MinRotationX = 0.,
float MinRotationY= 0.,
float MinRotationZ= 0.,
int MinParamA = 2,
float Scale = 1.913828,
float MinScalingConstant = 1.0,
float RotAngle = 0,

float RotVectorX= 1.,
float RotVectorY= 1.,
float RotVectorZ= 1.,
ADD_COLOR_PARAMS,
    output _sdf c = _SDFDEF)
//	output float dist=0.0)
	
{	

vec3	InvCenter = vec3(InvCenterX, InvCenterY, InvCenterZ);
vec3	InvRotation = vec3(InvRotationX, InvRotationY, InvRotationZ);
vec3	MinCenter = vec3(MinCenterX, MinCenterY, MinCenterZ);
vec3	MinRotation = vec3(MinRotationX, MinRotationY, MinRotationZ);
vec3	RotVector = vec3(RotVectorX, RotVectorY, RotVectorZ);

float sqrt_i3 = 1.0 / sqrt(3.0);
vec3 zeros = vec3(0.0,0.0,0.0);
vec3 Nv_oct[20];
vec3 Nv_cube[20];
int sides_oct = 8;
int sides_cube = 6;

float absScalem1 = abs(Scale - 1.0);
float AbsScaleRaisedTo1mIters = pow(abs(Scale), float(1-Iterations));


mat3 rot;
float minDistanceSqr;


  Nv_oct[0] = vec3(sqrt_i3, sqrt_i3, -sqrt_i3);
  Nv_oct[1] = vec3(sqrt_i3, -sqrt_i3, sqrt_i3);
  Nv_oct[2] = vec3(-sqrt_i3, sqrt_i3, sqrt_i3);
  Nv_oct[3] = vec3(-sqrt_i3, -sqrt_i3, -sqrt_i3);
  Nv_oct[4] = vec3(sqrt_i3, sqrt_i3, sqrt_i3);
  Nv_oct[5] = vec3(-sqrt_i3, -sqrt_i3, sqrt_i3);
  Nv_oct[6] = vec3(-sqrt_i3, sqrt_i3, -sqrt_i3);
  Nv_oct[7] = vec3(sqrt_i3, -sqrt_i3, -sqrt_i3);
  
  for (int i=8; i<20; i++)
  { 
     Nv_oct[i]=zeros; 
  }

  Nv_cube[0] = vec3(1.0, 0, 0);
  Nv_cube[1] = vec3(-1.0, 0, 0);
  Nv_cube[2] = vec3(0, 1.0, 0);
  Nv_cube[3] = vec3(0, -1.0, 0);
  Nv_cube[4] = vec3(0, 0, 1.0);
  Nv_cube[5] = vec3(0, 0, -1.0);
  
  for (int i=6; i<20; i++)
  { 
     Nv_cube[i]=zeros; 
  }
  
  rot = rotationMatrix3(normalize(RotVector), RotAngle);
  
  // minDistanceSqr = MinRadius * MinRadius;
  Shape     invShape = Shape(InvType,
		   InvScale,
		   InvCenter,
		   rotationMatrixXYZ(InvRotation),
		   InvParamA);
  Shape     minShape = Shape(MinType,
		   MinScale, 
		   MinCenter,
		   rotationMatrixXYZ(MinRotation),
		   MinParamA);



  vec3 offset = vec3(P[0],P[1],P[2]);
  vec3 p = vec3(P[0],P[1],P[2]);
  INIT_ORBIT_TRAP;  
  float dr = 1.0;
  for (int i = 0; i < Iterations; i++) {
    p *= rot;      // rotation (does not change derivative)
    boxFold(p,dr,BoxFoldLimit);       // conditional reflection and scale
    if (i < ColorIterations) {
      float d2 = dot(p,p);
      orbitTrap = min(orbitTrap, abs(d2));
    }
    shapeInversion(p,dr,invShape,minShape,MinScalingConstant,Nv_cube,sides_cube,Nv_oct,sides_oct);    // conditional shape inversion
    p = (p * Scale) + offset;  // scale and translate
    dr = (dr * abs(Scale)) + 1.0;
    float distance = dot(p,p);
    if (distance > Bailout) { break; }
  }
//dist=((length(p) - absScalem1) / abs(dr)) - AbsScaleRaisedTo1mIters;
c.dist=((length(p) - absScalem1) / abs(dr)) - AbsScaleRaisedTo1mIters;
  APPLY_ORBIT_TRAP;
}

